Dear Students,

This file contains the block of code to be tried inside the file "Program.cs":


/*
    IMPORTANT NOTE:
    ***************
    Please refer to my text file "Program.cs.txt" inside the project directory to copy the snippets of code.
    Don't forget to press "CTRL+k+D" to format your code :-)
    */
    internal class Program
    {
        static void Main(string[] args)
        {
            // Creating an instance of our database:
            // var db = new BloggingContext();

            // or we can use the C# "using" decoration:
            using BloggingContext contextDb = new BloggingContext();
            /*
            using decoration: 
            ensures that the "BloggingContext" object is disposed properly when we're done using it
            */

            // In case if we use the DbPath:
            // Note: This sample requires the database to be created before running.
            Console.WriteLine($"Database Path (Main Program.cs): {contextDb.DbPath}");


            Console.WriteLine("Database Blogs Table: " + contextDb.Blogs);
            Console.WriteLine("Database Blogs Table: " + contextDb.Posts);

            Console.WriteLine("Querying the table blogs from our database:");
            /*
             Using C# code to query our database
            */
            // Create (adding) new blogs to blogs table:
            Console.WriteLine("Inserting a new blog");


            // PART#1
            // ******
            Console.WriteLine("Creating blogs/posts and display them");
            /*
            Our "blogs" table fields:
            - BlogId
            - Name
            - Rating

            Creating a new blog object that represents one table in our Database (Hard Coding)
            */

            // Instead of Blog blog1 = new Blog() => we can just use: Blog blog1 = new()
            Blog blog1 = new()
            {
                Name = "Dot NET",
                Rating = 7,
            };

            /*
            Using Add method of Blogs DB set property
            */
            contextDb.Blogs.Add(blog1);

            // Creating another new blog category
            Blog blog2 = new()
            {
                Name = "Front-End Frameworks",
                Rating = 4,
            };

            /*
            NOTE:
            Below we are using Add method of the context object "contextDb"

            EF core can find that this entity "blog2" is a blog
            based on its type
           */
            contextDb.Add(blog2);

            /*
           After adding the entities, 
           finally we save them all
           */
            contextDb.SaveChanges();

            // adding new posts to the post table:
            Post post1 = new()
            {
                Title = "Hello World",
                Content = "I wrote an app using EF Core!",
                BlogId = 1,
            };
            contextDb.Add(post1);

            Post post2 = new()
            {
                Title = "EF",
                Content = "EF is the Entity Framework in .NET Database Development",
                BlogId = 1,
            };
            contextDb.Add(post2);


            Post post3 = new()
            {
                Title = "EF with any Database",
                Content = "EF can work with any database",
                BlogId = 2,
            };
            contextDb.Add(post3);

            //contextDb.SaveChanges();

            /*
             * Querying the context blog table using "Fluent API"
             * 
             * Fluent APIs: 
             * - use extension methods to chain (combine) more than one method together
             * - use Lambda expression with the queries 
             */
            var blogs = contextDb.Blogs.OrderBy(b => b.Name);
            /*
           * Finally write them all to the console window
           */
            foreach (Blog b in blogs)
            {
                Console.WriteLine($"ID:                {b.BlogId}");
                Console.WriteLine($"Name:              {b.Name}");
                Console.WriteLine($"Rating:            {b.Rating}");
                Console.WriteLine(new string('-', 20));

            }

            // Another Query: Read from the "blogs" table with Where and OrderBy
            blogs = contextDb.Blogs
                .Where(b => b.BlogId > 2)
                .OrderBy(b => b.Rating);

            // write them all to the console window
            foreach (Blog b in blogs)
            {
                Console.WriteLine($"ID:                {b.BlogId}");
                Console.WriteLine($"Name:              {b.Name}");
                Console.WriteLine($"Rating:            {b.Rating}");
                Console.WriteLine(new string('-', 20));
            }


            // Another Query: Read from the "blogs" table with OrderBy and First
            Console.WriteLine("Querying for a blog");
            var blog = contextDb.Blogs
                .OrderBy(b => b.BlogId)
                .First();


            Console.WriteLine("End of part1");
            Console.ReadLine();

            // PART#2
            // ******
            Console.WriteLine("Creating a blogs based on the user's input");
            /*
            Asking the user to enter the data
            */
            Console.WriteLine("Enter the name for your new blog:");
            string? name = Console.ReadLine();

            // 1. Creating the new blog
            Blog userBlog = new()
            {
                Name = name,
            };

            // 2. Add the blog
            contextDb.Add(userBlog);

            // 3. Save the changes
            contextDb.SaveChanges();

            // Write them in Console window:
            foreach (Blog b in blogs)
            {
                Console.WriteLine($"ID:                {b.BlogId}");
                Console.WriteLine($"Name:              {b.Name}");
                Console.WriteLine($"Rating:            {b.Rating}");
                Console.WriteLine(new string('-', 20));

            }

            Console.WriteLine("End of part2");
            Console.ReadLine();

            // Part#3:
            // *******
            Console.WriteLine("Display posts");
            /*
             * Instead of using Fluent API syntax,
             * we can use Linq syntax
             * both "Fluent API" and "Linq" have identical results
             */
            var posts = from post in contextDb.Posts
                        where post.BlogId == 2
                        orderby post.Title
                        select post;

            /*
            Our "posts" table fields:
            - PostId
            - Title
            - Content
            - BlogId
            */

            // write them all to the console window
            foreach (Post p in posts)
            {
                Console.WriteLine($"Post ID:                {p.PostId}");
                Console.WriteLine($"Post Title:             {p.Title}");
                Console.WriteLine($"Post Content:           {p.Content}");
                Console.WriteLine($"Blog ID:            {p.BlogId}");
                Console.WriteLine(new string('-', 20));
            }

            Console.WriteLine("End of part3");
            Console.ReadLine();

            // Part#4:
            // *******
            Console.WriteLine("Update a blog");
            // Update and entity in a database
            Console.WriteLine("Updating a blog by changing its title");
            /*
            To update an entity, we need to get a reference to it
            
            looking for any blog with the title of "Dot NET" and changing its name
            and taking:
            - the first occurrence of that record if found 
            OR:
            - the default result which is "Null" if not found
            */
            // we had already declared the "blog" variable before:
            blog = contextDb.Blogs.Where(b => b.Name=="Dot NET")
                .FirstOrDefault();

            // Checking if the blogTitle is type of Blog object and not null:
            if (blog is Blog)
            {
                // Then changing its title:
                blog.Name = "DOT NET Framework";
            } else
            {
                Console.WriteLine("Update Failed, No record found!");
            }

            // Finally, always saving:
            contextDb.SaveChanges();

            // Write them in Console window:
            foreach (Blog b in blogs)
            {
                Console.WriteLine($"ID:                {b.BlogId}");
                Console.WriteLine($"Name:              {b.Name}");
                Console.WriteLine($"Rating:            {b.Rating}");
                Console.WriteLine(new string('-', 20));
            }

            Console.WriteLine("End of part4");
            Console.ReadLine();

            // Part#5:
            // *******
            Console.WriteLine("Delete a blog");
            // Delete an entity in a database
            // Using .Remove() method of the "BloggingContext" object
            // Also passing a reference to the entity to the .Remove() method
            // we had already declared the "blog" variable before:
            blog = contextDb.Blogs.Where(b => b.Name == "Dot NET")
                .FirstOrDefault();

            // Checking if the blogTitle is type of Blog object and not null:
            if (blog is Blog)
            {
                // Remove that record:
                contextDb.Remove(blog);
            }
            else
            {
                Console.WriteLine("Delete Failed, no record found!");
            }

            // Finally, always saving:
            contextDb.SaveChanges();

            // Write them in Console window:
            foreach (Blog b in blogs)
            {
                Console.WriteLine($"ID:                {b.BlogId}");
                Console.WriteLine($"Name:              {b.Name}");
                Console.WriteLine($"Rating:            {b.Rating}");
                Console.WriteLine(new string('-', 20));
            }

            Console.WriteLine("End of part5");
            Console.ReadLine();